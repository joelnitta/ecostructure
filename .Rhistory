counts[1,index1]
index1
z[1,index1]
index1
counts[1,index1]
counts[1,]
krige.control.default <- list(cov.mod = "whitmat",
sill=1, range=sd(order)/100, smooth=.01)
out <- do.call(SpatialExtremes::kriging, append(list(data =counts[i, index2 ],
data.coord = order[index2],
krig.coord = order[index1]),
krige.control))
z[i, index1] <- round(as.vector(out$krig.est))
z[i, index2] <- counts[i, index2]
z[1, index1]
index1
counts[1,]
order <- order + abs(runif(length(order), 0, jitter))
krige.control.default <- list(cov.mod = "whitmat",
sill=0.2, range=sd(order)/100, smooth=.01)
krige.control <- modifyList(krige.control, krige.control.default)
z <- matrix(0, nrow(counts), ncol(counts))
colnames(z)<- colnames(counts)
rownames(z)<- rownames(counts)
jitter <- 1e-06
order
order <- order + abs(runif(length(order), 0, jitter))
krige.control.default <- list(cov.mod = "whitmat",
sill=0.2, range=sd(order)/100, smooth=.01)
krige.control <- modifyList(krige.control, krige.control.default)
z <- matrix(0, nrow(counts), ncol(counts))
colnames(z)<- colnames(counts)
rownames(z)<- rownames(counts)
i <- 1
index1 <- which(counts[i,] == 0)
index2 <- setdiff(1:ncol(counts), index1)
out <- do.call(SpatialExtremes::kriging, append(list(data =counts[i, index2 ],
data.coord = order[index2],
krig.coord = order[index1]),
krige.control))
z[i, index1] <- round(as.vector(out$krig.est))
z[i, index2] <- counts[i, index2]
z[i,]
z[i,index1]
counts[1,]
counts_ordered <- counts[,order]
counts_ordered <- counts[, order(order)]
counts_ordered
counts_ordered[1,]
order <- order + abs(runif(length(order), 0, jitter))
krige.control.default <- list(cov.mod = "whitmat",
sill=0.2, range=sd(order)/100, smooth=.01)
krige.control <- modifyList(krige.control, krige.control.default)
z <- matrix(0, nrow(counts), ncol(counts))
colnames(z)<- colnames(counts)
rownames(z)<- rownames(counts)
for(i in 1:nrow(counts)){
index1 <- which(counts[i,] == 0)
index2 <- setdiff(1:ncol(counts), index1)
out <- do.call(SpatialExtremes::kriging, append(list(data =counts[i, index2 ],
data.coord = order[index2],
krig.coord = order[index1]),
krige.control))
z[i, index1] <- round(as.vector(out$krig.est))
z[i, index2] <- counts[i, index2]
}
z_ordered <- z[, order(order)]
plot(z_ordered[1,])
plot(counts_ordered[1,])
plot(counts_ordered[2,])
plot(counts_ordered[2,])
plot(z_ordered[2,])
plot(counts_ordered[3,])
plot(z_ordered[3,])
plot(counts_ordered[5,])
plot(z_ordered[5,])
plot(counts_ordered[6,])
plot(z_ordered[6,])
order <- order + abs(runif(length(order), 0, jitter))
krige.control.default <- list(cov.mod = "whitmat",
sill=0.5, range=sd(order)/10, smooth=.01)
krige.control <- modifyList(krige.control, krige.control.default)
z <- matrix(0, nrow(counts), ncol(counts))
colnames(z)<- colnames(counts)
rownames(z)<- rownames(counts)
for(i in 1:nrow(counts)){
index1 <- which(counts[i,] == 0)
index2 <- setdiff(1:ncol(counts), index1)
out <- do.call(SpatialExtremes::kriging, append(list(data =counts[i, index2 ],
data.coord = order[index2],
krig.coord = order[index1]),
krige.control))
z[i, index1] <- round(as.vector(out$krig.est))
z[i, index2] <- counts[i, index2]
}
z_ordered <- z[order, ]
z_ordered <- z[ , order(order) ]
counts_ordered <- counts[ , order(order) ]
plot(z_ordered[1,])
plot(counts_ordered[1,])
plot(z_ordered[1,])
plot(counts_ordered[3,])
plot(z_ordered[3,])
source('~/Documents/ecostructure/R/krige_counts.R')
func_counts <- krige_counts(new_counts,
order = morph.scores$PC4,
krige.control = list(cov.mod = "whitmat"))
counts_ordered <- new_counts[, order(morph.scores$PC4)]
plot(counts_ordered[1,])
which(colnames(counts_ordered), names_2)
match(colnames(counts_ordered), names_2)
match(names_2, colnames(counts_ordered))
func_counts[, match(names_2, colnames(counts_ordered))]
new_counts[, match(names_2, colnames(counts_ordered))]
all_morph <- c(morph.scores[features[1,],]$PC1, morph.scores[features[2,],]$PC1)
places <- c(morph.scores[features[1,],]$Motif, morph.scores[features[2,],]$Motif)
all_morph_2 <- all_morph[order(all_morph, decreasing =FALSE)]
places_2 <- places[order(all_morph, decreasing =FALSE)]
names <- c(rownames(morph.scores)[features[1,]], rownames(morph.scores)[features[2,]])
names_2 <- names[order(all_morph, decreasing = FALSE)]
places_2
all_morph_2
counts_ordered <- new_counts[, order(morph.scores$PC1)]
match(names_2, colnames(counts_ordered))
places_2
match(names_2, colnames(counts_ordered))
all_morph <- c(morph.scores[features[1,],]$PC2, morph.scores[features[2,],]$PC2)
places <- c(morph.scores[features[1,],]$Motif, morph.scores[features[2,],]$Motif)
all_morph_2 <- all_morph[order(all_morph, decreasing =FALSE)]
places_2 <- places[order(all_morph, decreasing =FALSE)]
names <- c(rownames(morph.scores)[features[1,]], rownames(morph.scores)[features[2,]])
names_2 <- names[order(all_morph, decreasing = FALSE)]
places_2
all_morph_2
counts_ordered <- new_counts[, order(morph.scores$PC2)]
places_2
match(names_2, colnames(counts_ordered))
all_morph <- c(morph.scores[features[1,],]$PC3, morph.scores[features[2,],]$PC3)
places <- c(morph.scores[features[1,],]$Motif, morph.scores[features[2,],]$Motif)
all_morph_2 <- all_morph[order(all_morph, decreasing =FALSE)]
places_2 <- places[order(all_morph, decreasing =FALSE)]
names <- c(rownames(morph.scores)[features[1,]], rownames(morph.scores)[features[2,]])
names_2 <- names[order(all_morph, decreasing = FALSE)]
places_2
all_morph_2
counts_ordered <- new_counts[, order(morph.scores$PC3)]
places_2
match(names_2, colnames(counts_ordered))
new_counts[, match(names_2, colnames(counts_ordered))[2:4]]
func_counts[, match(names_2, colnames(counts_ordered))[2:4]]
counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
func_counts[, match(names_2, colnames(counts_ordered))[2:4]]
func_counts <- krige_counts(new_counts,
order = morph.scores$PC4,
krige.control = list(cov.mod = "whitmat"))
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
func_counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
func_counts_ordered[, match(names_2, colnames(func_counts_ordered))[2:4]]
colnames(func_counts)
colnames(new_counts)
func_counts <- krige_counts(new_counts,
order = morph.scores$PC4,
krige.control = list(cov.mod = "whitmat"))
counts_ordered <- new_counts[, order(morph.scores$PC4)]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
colnames(func_counts_ordered)
colnames(counts_ordered)
colnames(func_counts_ordered)
match(names_2, colnames(counts_ordered))
all_morph <- c(morph.scores[features[1,],]$PC4, morph.scores[features[2,],]$PC4)
places <- c(morph.scores[features[1,],]$Motif, morph.scores[features[2,],]$Motif)
all_morph_2 <- all_morph[order(all_morph, decreasing =FALSE)]
places_2 <- places[order(all_morph, decreasing =FALSE)]
names <- c(rownames(morph.scores)[features[1,]], rownames(morph.scores)[features[2,]])
names_2 <- names[order(all_morph, decreasing = FALSE)]
places_2
all_morph_2
func_counts <- krige_counts(new_counts,
order = morph.scores$PC4,
krige.control = list(cov.mod = "whitmat"))
counts_ordered <- new_counts[, order(morph.scores$PC4)]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
match(names_2, colnames(counts_ordered))
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
func_counts_ordered[, match(names_2, colnames(func_counts_ordered))[2:4]]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
func_counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
SpatialExtremes::kriging(data = c(12, 13, 14, 20, 21), data.coord = c(1, 3, 4, 5, 6), krig.coord = c(2,7))
SpatialExtremes::kriging(data = c(12, 13, 14, 20, 21), data.coord = c(1, 3, 4, 5, 6), krig.coord = c(2,7),sill=0.5, range=1, smooth=.01)
SpatialExtremes::kriging(data = c(120, 130, 140, 200, 210), data.coord = c(1, 3, 4, 5, 6), krig.coord = c(2,7))
SpatialExtremes::kriging(data = c(120, 130, 140, 200, 210), data.coord = c(1, 3, 4, 5, 6), krig.coord = c(2,7), sill=0.5, range=1, smooth=.01)
SpatialExtremes::kriging(data = c(120, 130, 140, 200, 210), data.coord = c(1, 3, 4, 5, 6), krig.coord = c(2,7), sill=0.5, range=10, smooth=.01)
SpatialExtremes::kriging(data = c(120, 130, 140, 200, 210), data.coord = c(1, 3, 4, 5, 6), krig.coord = c(2,7), sill=10, range=10, smooth=.01)
SpatialExtremes::kriging(data = c(120, 130, 140, 200, 210), data.coord = c(1, 3, 4, 5, 6), krig.coord = c(2,7), sill=10, range=10, smooth=1)
SpatialExtremes::kriging(data = c(120, 130, 140, 200, 210), data.coord = c(1, 3, 4, 5, 6), krig.coord = c(2,7), sill=10, range=10, smooth=0.1)
SpatialExtremes::kriging(data = c(120, 130, 140, 200, 210), data.coord = c(1, 3, 4, 5, 6), krig.coord = c(2,7), sill=10, range=10, smooth=0.01)
source('~/Documents/ecostructure/R/krige_counts.R')
func_counts <- krige_counts(new_counts,
order = morph.scores$PC4,
krige.control = list(cov.mod = "whitmat"))
counts_ordered <- new_counts[, order(morph.scores$PC4)]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
func_counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
source('~/Documents/ecostructure/R/krige_counts.R')
func_counts <- krige_counts(new_counts,
order = morph.scores$PC4,
krige.control = list(cov.mod = "whitmat"))
counts_ordered <- new_counts[, order(morph.scores$PC4)]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
match(names_2, colnames(counts_ordered))
counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
func_counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
source('~/Documents/ecostructure/R/krige_counts.R')
func_counts <- krige_counts(new_counts,
order = morph.scores$PC4,
krige.control = list(cov.mod = "whitmat"))
counts_ordered <- new_counts[, order(morph.scores$PC4)]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
match(names_2, colnames(counts_ordered))
counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
func_counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
source('~/Documents/ecostructure/R/krige_counts.R')
func_counts <- krige_counts(new_counts,
order = morph.scores$PC4,
krige.control = list(cov.mod = "whitmat"))
counts_ordered <- new_counts[, order(morph.scores$PC4)]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
func_counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
source('~/Documents/ecostructure/R/krige_counts.R')
func_counts <- krige_counts(new_counts,
order = morph.scores$PC4,
krige.control = list(cov.mod = "whitmat", smooth = 0.3, sill = 0.01))
counts_ordered <- new_counts[, order(morph.scores$PC4)]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
match(names_2, colnames(counts_ordered))
counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
func_counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
source('~/Documents/ecostructure/R/krige_counts.R')
func_counts <- krige_counts(new_counts,
order = morph.scores$PC4,
krige.control = list(cov.mod = "whitmat", smooth = 0.3, sill = 0.01))
counts_ordered <- new_counts[, order(morph.scores$PC4)]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
func_counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
source('~/Documents/ecostructure/R/krige_counts.R')
func_counts <- krige_counts(new_counts,
order = morph.scores$PC4,
krige.control = list(cov.mod = "whitmat", smooth = 0.3, sill = 0.01))
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
func_counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
func_counts <- krige_counts(new_counts,
order = morph.scores$PC4,
krige.control = list(cov.mod = "whitmat", smooth = 0.3, sill = 0.5))
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
func_counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
func_counts <- krige_counts(new_counts,
order = morph.scores$PC4,
krige.control = list(cov.mod = "whitmat", smooth = 0.5, sill = 0.5))
counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
func_counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
func_counts <- krige_counts(new_counts,
order = morph.scores$PC4,
krige.control = list(cov.mod = "whitmat", smooth = 1, sill = 0.5))
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
func_counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
order
sd(order)
sd(order)/100
sort(order)
sort(order[2:length(order)])-sort(order[1:(length(order)-1)])
sort(order)
0.42/100
0.42/10
source('~/Documents/ecostructure/R/krige_counts.R')
func_counts <- krige_counts(new_counts,
order = morph.scores$PC4,
krige.control = list(cov.mod = "whitmat", smooth = 1, sill = 0.5))
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
func_counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
source('~/Documents/ecostructure/R/krige_counts.R')
func_counts <- krige_counts(new_counts,
order = morph.scores$PC4,
krige.control = list(cov.mod = "whitmat", smooth = 1, sill = 0.5))
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
func_counts_ordered[, match(names_2, colnames(counts_ordered))[2:4]]
places_2
match(names_2, colnames(counts_ordered))
places_2
indices_2 <- match(names_2, colnames(counts_ordered))
indices_2
plot_vec <- c()
plot_vec[1] <- 0
for(i in 2:names_2){
if (names_2[i] == names_2[i-1]){
plot_vec[i] <- 0
}else{
plot_vec[i] <- plot_vec[i-1] + (1/(i*(indices_2[i] - indices_2[i-1])))
}
}
plot_vec <- c()
plot_vec[1] <- 0
for(i in 2:length(names_2)){
if (names_2[i] == names_2[i-1]){
plot_vec[i] <- 0
}else{
plot_vec[i] <- plot_vec[i-1] + (1/(i*(indices_2[i] - indices_2[i-1])))
}
}
plot_vec
plot(1:length(plot_vec), plot_vec)
plot(1:length(plot_vec), plot_vec, type = "l")
all_morph <- c(morph.scores[features[1,],]$PC3, morph.scores[features[2,],]$PC3)
places <- c(morph.scores[features[1,],]$Motif, morph.scores[features[2,],]$Motif)
all_morph_2 <- all_morph[order(all_morph, decreasing =FALSE)]
places_2 <- places[order(all_morph, decreasing =FALSE)]
names <- c(rownames(morph.scores)[features[1,]], rownames(morph.scores)[features[2,]])
names_2 <- names[order(all_morph, decreasing = FALSE)]
places_2
all_morph_2
counts_ordered <- new_counts[, order(morph.scores$PC3)]
places_2
indices_2  <- match(names_2, colnames(counts_ordered))
indices_2
plot_vec <- c()
plot_vec[1] <- 0
for(i in 2:length(names_2)){
if (names_2[i] == names_2[i-1]){
plot_vec[i] <- 0
}else{
plot_vec[i] <- plot_vec[i-1] + (1/(i*(indices_2[i] - indices_2[i-1])))
}
}
plot(1:length(plot_vec), plot_vec, type = "l")
all_morph <- c(morph.scores[features[1,],]$PC1, morph.scores[features[2,],]$PC1)
places <- c(morph.scores[features[1,],]$Motif, morph.scores[features[2,],]$Motif)
all_morph_2 <- all_morph[order(all_morph, decreasing =FALSE)]
places_2 <- places[order(all_morph, decreasing =FALSE)]
names <- c(rownames(morph.scores)[features[1,]], rownames(morph.scores)[features[2,]])
names_2 <- names[order(all_morph, decreasing = FALSE)]
places_2
all_morph_2
counts_ordered <- new_counts[, order(morph.scores$PC1)]
places_2
indices_2 <- match(names_2, colnames(counts_ordered))
indices_2
plot_vec <- c()
plot_vec[1] <- 0
for(i in 2:length(names_2)){
if (names_2[i] == names_2[i-1]){
plot_vec[i] <- 0
}else{
plot_vec[i] <- plot_vec[i-1] + (1/(i*(indices_2[i] - indices_2[i-1])))
}
}
plot(1:length(plot_vec), plot_vec, type = "l")
all_morph <- c(morph.scores[features[1,],]$PC1, morph.scores[features[2,],]$PC1)
places <- c(morph.scores[features[1,],]$Motif, morph.scores[features[2,],]$Motif)
all_morph_2 <- all_morph[order(all_morph, decreasing =FALSE)]
places_2 <- places[order(all_morph, decreasing =FALSE)]
names <- c(rownames(morph.scores)[features[1,]], rownames(morph.scores)[features[2,]])
names_2 <- names[order(all_morph, decreasing = FALSE)]
plot_vec <- c()
plot_vec[1] <- 0
for(i in 2:length(names_2)){
if (places_2[i] == places_2[i-1]){
plot_vec[i] <- 0
}else{
plot_vec[i] <- plot_vec[i-1] + (1/(i*(indices_2[i] - indices_2[i-1])))
}
}
plot(1:length(plot_vec), plot_vec, type = "l")
places_2
indices_2 <- match(names_2, colnames(counts_ordered))
indices_2
plot_vec <- c()
plot_vec[1] <- 0
for(i in 2:length(places_2)){
if (places_2[i] == places_2[i-1]){
plot_vec[i] <- 0
}else{
plot_vec[i] <- plot_vec[i-1] + (1/(i*(indices_2[i] - indices_2[i-1])))
}
}
plot(1:length(plot_vec), plot_vec, type = "l")
plot_vec
plot_vec <- c()
plot_vec[1] <- 0
for(i in 2:length(places_2)){
if (places_2[i] == places_2[i-1]){
plot_vec[i] <- plot_vec[i-1]
}else{
plot_vec[i] <- plot_vec[i-1] + (1/(i*(indices_2[i] - indices_2[i-1])))
}
}
plot(1:length(plot_vec), plot_vec, type = "l")
all_morph <- c(morph.scores[features[1,],]$PC2, morph.scores[features[2,],]$PC2)
places <- c(morph.scores[features[1,],]$Motif, morph.scores[features[2,],]$Motif)
all_morph_2 <- all_morph[order(all_morph, decreasing =FALSE)]
places_2 <- places[order(all_morph, decreasing =FALSE)]
names <- c(rownames(morph.scores)[features[1,]], rownames(morph.scores)[features[2,]])
names_2 <- names[order(all_morph, decreasing = FALSE)]
places_2
all_morph_2
counts_ordered <- new_counts[, order(morph.scores$PC2)]
places_2
indices_2 <- match(names_2, colnames(counts_ordered))
indices_2
plot_vec <- c()
plot_vec[1] <- 0
for(i in 2:length(places_2)){
if (places_2[i] == places_2[i-1]){
plot_vec[i] <- plot_vec[i-1]
}else{
plot_vec[i] <- plot_vec[i-1] + (1/(i*(indices_2[i] - indices_2[i-1])))
}
}
plot(1:length(plot_vec), plot_vec, type = "l")
plot_vec <- c()
plot_vec[1] <- 0
for(i in 2:length(places_2)){
if (places_2[i] == places_2[i-1]){
plot_vec[i] <- plot_vec[i-1]
}else{
plot_vec[i] <- plot_vec[i-1] + (1/(10*i*(indices_2[i] - indices_2[i-1])))
}
}
plot(1:length(plot_vec), plot_vec, type = "l")
plot_vec <- c()
plot_vec[1] <- 0
for(i in 2:length(places_2)){
if (places_2[i] == places_2[i-1]){
plot_vec[i] <- plot_vec[i-1]
}else{
plot_vec[i] <- plot_vec[i-1] + (1/(i^2*(indices_2[i] - indices_2[i-1])))
}
}
plot(1:length(plot_vec), plot_vec, type = "l")
all_morph <- c(morph.scores[features[1,],]$PC4, morph.scores[features[2,],]$PC4)
places <- c(morph.scores[features[1,],]$Motif, morph.scores[features[2,],]$Motif)
all_morph_2 <- all_morph[order(all_morph, decreasing =FALSE)]
places_2 <- places[order(all_morph, decreasing =FALSE)]
names <- c(rownames(morph.scores)[features[1,]], rownames(morph.scores)[features[2,]])
names_2 <- names[order(all_morph, decreasing = FALSE)]
places_2
all_morph_2
func_counts <- krige_counts(new_counts,
order = morph.scores$PC4,
krige.control = list(cov.mod = "whitmat", smooth = 1, sill = 0.5))
counts_ordered <- new_counts[, order(morph.scores$PC4)]
func_counts_ordered <- func_counts[, order(morph.scores$PC4)]
places_2
indices_2 <- match(names_2, colnames(counts_ordered))
indices_2
plot_vec <- c()
plot_vec[1] <- 0
for(i in 2:length(places_2)){
if (places_2[i] == places_2[i-1]){
plot_vec[i] <- plot_vec[i-1]
}else{
plot_vec[i] <- plot_vec[i-1] + (1/(i*(indices_2[i] - indices_2[i-1])))
}
}
plot(1:length(plot_vec), plot_vec, type = "l")
all_morph <- c(morph.scores[features[1,],]$PC3, morph.scores[features[2,],]$PC3)
places <- c(morph.scores[features[1,],]$Motif, morph.scores[features[2,],]$Motif)
all_morph_2 <- all_morph[order(all_morph, decreasing =FALSE)]
places_2 <- places[order(all_morph, decreasing =FALSE)]
names <- c(rownames(morph.scores)[features[1,]], rownames(morph.scores)[features[2,]])
names_2 <- names[order(all_morph, decreasing = FALSE)]
places_2
all_morph_2
counts_ordered <- new_counts[, order(morph.scores$PC3)]
places_2
indices_2  <- match(names_2, colnames(counts_ordered))
indices_2
plot_vec <- c()
plot_vec[1] <- 0
for(i in 2:length(places_2)){
if (places_2[i] == places_2[i-1]){
plot_vec[i] <- plot_vec[i-1]
}else{
plot_vec[i] <- plot_vec[i-1] + (1/(i*(indices_2[i] - indices_2[i-1])))
}
}
plot(1:length(plot_vec), plot_vec, type = "l")
plot_vec <- c()
plot_vec[1] <- 0
for(i in 2:length(places_2)){
if (places_2[i] == places_2[i-1]){
plot_vec[i] <- plot_vec[i-1]
}else if (places_2[i] == "Lowland East" && places_2[i-1] == "Lowland West"){
plot_vec[i] <- plot_vec[i-1] + (1/(i*(indices_2[i] - indices_2[i-1])))
}else if (places_2[i] == "Lowland West" && places_2[i-1] == "Lowland East"){
plot_vec[i] <- plot_vec[i-1] + (1/(i*(indices_2[i] - indices_2[i-1])))
}else{
plot_vec[i] <- plot_vec[i-1]
}
}
plot(1:length(plot_vec), plot_vec, type = "l")
contributors()
