%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{Grade of Membership Clustering and Visualization using CountClust}
%\VignettePackage{CountClust}

% To compile this document
% library('knitr'); rm(list=ls()); knit('CountClust/vignettes/count-clust.Rnw')
% library('knitr'); rm(list=ls()); knit2pdf('CountClust/vignettes/count-clust.Rnw'); openPDF('count-clust.pdf')
% !Rnw weave = knitr

\documentclass[12pt]{article}

\newcommand{\ecostructure}{\textit{ecostructure}}
\usepackage{dsfont}
\usepackage{cite}


<<knitr, echo=FALSE, results="hide">>=
library("knitr")
opts_chunk$set(tidy=FALSE,tidy.opts=list(width.cutoff=30),dev="png",
               fig.show="hide",
               fig.width=4,fig.height=7,
               message=FALSE)
@

<<style, eval=TRUE, echo=FALSE, results="asis">>=
BiocStyle::latex()
@


\bioctitle[\ecostructure{} - Grade of Membership Model and Visualization for ecological species abundance data]{\ecostructure{} - Grade of Membership Model and Visualization for ecological species abundance data}

\begin{document}

\maketitle

\section{Introduction}

The \textbf{ecostructure} package is an R package that replicates the statistical analysis in this paper, but its toolbox of functions is generic enough in handling and analyzing other species abundance data. The package provides functions for fitting the Grade of Membership (GoM) model, along with the visualization of model fit using Block Structure plot \ref{Pritchard}\ref{Taddy}. The package comes with the raw taxonomic data saved as an ExpressionSet object and provides a pipeline for reading and processing counts data corresponding to different dimensions of diversity, e.g. - phylogenetic, regional and functional, which serve as readymade input for the GoM model. This package is an upgraded version of the CountClust package due to Dey et al \ref{Dey} for fitting GoM models on RNA-seq data

\section{Installation}

The package is available on Github and can be installed as follows

<<options, results="hide", echo=FALSE>>=
options(digits=3, width=80, prompt=" ", continue=" ")
@

<<install_ecostructure_bio, eval=FALSE>>=
library(devtools)
install_github("kkdey/ecostructure")
@ %def

Load the package as

<<load_ecostructure_bio, eval = TRUE>>=
library(ecostructure)
library(Biobase)
@ %def

to use the GoM model, the user needs to install the **maptpx** package

<<install_github, eval=FALSE>>=
library(devtools)
install_github("kkdey/maptpx")
@ %def


\section{Data Preparation}

One can load the taxonomic data, together with the grid metadata ans species metadata as an ExpressionSet object as follows

<<data, eval=TRUE>>=
data <- get(load(system.file("extdata", "HimalayanBirdsData.rda",
                             package = "ecostructure")))
taxonomic_counts <- t(exprs(data))
taxonomic_counts[1:5,1:5]
@ %def


The corresponding grid metadata can be read as

<<pdata, eval = TRUE>>=
grid_metadata <- pData(phenoData(data))
head(grid_metadata)
@ %def

The species metadata can be read as follows

<<fdata, eval = TRUE>>=
species_metadata <- pData(featureData(data))
head(species_metadata)
@ %def


Along with the taxonomic data and metadata, the package provides the phylogenetic tree data for the bird species as a **.tre** file that can be loaded as follows, using the package **ape**.

<<tree, eval = TRUE>>=
phylo_tree <- ape::read.tree(system.file("extdata", "AllHim_Mar_27_2015.tre",
                             package = "ecostructure"))
phylo_tree
@ %def


The shape files for the regional motif analysis can be loaded as follows

<<shp, eval = TRUE>>=
shp_file <- ape::read.tree(system.file("extdata", "AllHim_Mar_27_2015.tre",
                             package = "ecostructure"))
shp_file
@ %def

\section{Grade of Membership Model and Visualization}

Here we illustrate how one can fit the Grade of Membership model and perform the visualization of the model fit using the Block Structure plot. Here we present a case study with number of clusters chosen to be between $2$ and $4$.

<<blockstructure, eval=TRUE>>=
elevation_metadata=grid_metadata$Elevation;
east_west_dir = grid_metadata$WorE;
gom_fit <- CountClust::FitGoM(taxonomic_counts, K=2:4, tol=0.1)
@ %def


\begin{verb} gom_fit \end{verb} is a list of size 3, with each component representing the model fit for the cluster $k$, varying from 2 to 4. The two main components of the model fit are the membership proportion matrix $\omega$, given by \begin{verb} gom_fit[[k]]$omega \end{verb} and the motif matrix \begin{verb} gom_fit[[k]]$theta \end{verb}. Examples for $K=2$ are

<<omega, eval=TRUE>>=

omega <- gom_fit[[2]]$omega
head(omega)
rowSums(omega)


theta <- gom_fit[[2]]$theta
head(theta)
colSums(theta)

@ %def

Using the grid metadata, we provide a Block Structure Plot representation of the membership proportion matrix. In a block Structure plot representation, one metadata is used for forming blocks (here the East/West direction) and in each block, the
the samples (along the rows of the Structure plot) are arranged by a second metadata (say Elevation).

<<block_structure, eval=TRUE, fig.height = 4, fig.height = 6>>=
BlockStructure(omega, blocker_metadata = east_west_dir,
               order_metadata = elevation_metadata,
               yaxis_label = "Elevation",
               levels_decreasing = FALSE)
@ %def


\begin{figure}[htp]
\begin{center}
\includegraphics[width=6in,height=6in]{figure/block_structure.png}
\end{center}
\end{figure}

\newpage

\textbf{ecostructure} provides tools to compare the GoM model fit on the data with respect to null model using the \begin{verb} nullmodel_GoM \end{verb} function.

<<nullmodel, eval=TRUE, fig.height = 4, fig.height = 5>>=
nullmodel_GoM(taxonomic_counts, K=2,
               tol=500, null.model="frequency",
               iter_randomized=5, plot=FALSE)
@

The function returns for a fixed $K$, the observed Bayes factor for the GoM model fit on the actual counts data, as well as the Bayes factor from applying GoM model on \begin{verb} iter_randomized \end{verb} many counts matrices generated under a specified null model. It also provdies a p-value of the observed Bayes factor with respect to the distribution of the Bayes factors from GoM on null model generated matrices.

In the above example \textbf{frequency} based null model was used. The other options are \textbf{richness}, \textbf{trialswap} and \textbf{independentswap}. Ideally if the observed Bayes factor should be higher than the Bayes factors from null model generated counts data.


\section{Processing motif data}

In this section, we demonstrate how \textbf{ecostructure} can be used to process
grid level counts data corresponding to different axes of diversity, that may range from being functional to regional to phylogenetic.

\subsection{phylogenetic motif}

For building the counts data corresponding to phylogenetic diversity, we provide a function,
\begin{verb} collapse_counts_by_phylo () \end{verb} to collapse the taxa in the taxonomic counts data based on the phylogenetic similarity profile of the species.
The function reads in the taxonomic counts data and the phylogenetic tree data and a user defined cut off at which to slice the tree and collapse the taxa in each branch into a single phylogenetic unit.

<<motif, eval = FALSE>>=
tree <- ape::read.tree(system.file("extdata",
                                   "grids_tree_3_10_16.tre",
                                    package = "ecostructure"))
phylo_counts <- collapse_counts_by_phylo(taxonomic_counts,
                                         tree, collapse_at = 10)
dim(phylo_counts)
@ %def

\subsection{regional motif}

For the regional profile, \textbf{ecostructure} allows the user to create Global assemblage dispersion fields and build maps data from those fields. To create the assemblage dispersion fields, the user would require to obatin the shapefiles (*.shp* files) for the all the species in the observed data.

One source of obtaining the *.shp* files for mapping to geographic boundaries is from the Natural Earth webpage (www.naturalearthdata.com/downloads). For our Himalyan birds data, we obatined the *.shp* files from BirdLife International (www.birdlife.org).

The user can put all the *.shp* files in the \begin{verb} all_bird_shapefiles () \end{verb} and then using this folder of shapefiles and the local taxonomic data, the user can create the global assemblage dispersion fields as follows

<<abundance_fields, eval = FALSE>>=
disp <- CreateGlobalDispersionFields(taxonomic_counts,
              shapefiles_dir = "all_bird_sjapefiles/")
@


<<mapsdisp_fields, eval=FALSE>>=
dispersion.field <- readRDS(system.file("extdata",
                    "dispersion_field_list.rds", package = "ecostructure"))
proj <- CRS(' +proj=longlat +ellps=WGS84')
global_shapefile <- readShapeLines(system.file("extdata",
         "ne_50m_admin_0_countries/ne_50m_admin_0_countries.shp",
          package = "ecostructure"), proj4string=proj)
par(mfrow)
maps <- CreateMapsFromDispersionFields(dispersion.field, global_shapefile)
@ %def

The function returns a list of map plots with as many elements as the number of sites. We can see the maps as follows

<<plot_map, eval=FALSE>>=
maps[[1]]
@ %def

\begin{figure}[htp]
\begin{center}
\includegraphics[width=6in,height=6in]{figure/maps.png}
\end{center}
\end{figure}



Finally, the user can generate the counts data corressponding to regional diversity using the \begin{verb} DispersionFieldTocounts() \end{verb} function

<<reg_counts, eval=FALSE>>=
regional_counts <- DispersionFieldToCounts(dispersion.field)
@ %def

<<reg_counts_2, eval=FALSE>>=

dim(regional_counts)

regional_counts[1:5,1:5]

@ %def


\subsection{functional motif}

In order to build counts data corresponding to functional diversity, we order the species based on some ordering metadata (like bill shape, size of the bird etc in our example). But there will be many zeros in the matrix as the species abundance data is sparse. To effectively account for the functional diversity and take into account the relatedness among the bird species, the zeros are filled in by kriging based on the species with non-zero abundance. We use the function \begin{verb} krige_counts \end{verb}.

<<krige_counts, eval = FALSE>>=
func_counts <- krige_counts(taxonomic_counts,
        order = species_metadata$bill_length,
            krige.control = list(cov.mod = "whitmat", sill=0.5, smooth=.01))
@ %def

<<krige_counts_2, eval = FALSE>>=
dim(func_counts)
head(func_counts[,1:5])
@ %def


We can also use traits to collapse the bird species by performing hierarchical clustering of the bird species based on a single trait or multiple traits. We perform this using the `trait_cluster()` function in **ecostructure**. We demonstrate its application next.

<<trait_cluster, eval=TRUE>>=

## pooling all the bill traits metadata to be used as traits for the hierarchical clustering

bill_traits <- as.matrix(dist(scale(species_metadata[,c(1:3)])))

## applying the hierarchical clustering of species based on bill traits

bill_trait_clust <- trait_cluster(counts = taxonomic_counts, traits = bill_traits, prop_div=0.3)

@

We first generate a traits matrix, with the columns representing the traits and rows corresponding to the trait values for each species. Then we use that to perform a hierarchical clustering of species and cut the dendrogram at a specified level, gven by  `prop_div`, determined by the proportional diversity of the abundance counts data explained by the clusters at that level.

These clusters of species are then used to collapse the counts data and reduce the original counts matrix with species along the columns to one with the clusters along the columns. This matrix is then used as input for the `CountClust::FitGoM` or `CountClust::FitGoMpool`  to determined how the species traits influence the clustering patterns.


\section{Extras}

\textbf{ecostructure} provides additional functions for plotting a variable of interest (which could be the grades of membership or the motif pattern) against a metadata and a diversity measure or against two metadata in three way scatter plot functions.

An example of plotting a variable against two metadata are as follows.

<<topic_meta_meta, eval=TRUE, fig.height = 4, fig.height = 6>>=
annotation = data.frame(x_names = c(paste0("A",1:5), paste0("B",1:5)),
x = c(0.5,2.0, 3.2, 4.6, 6.3,  23.5, 26.4, 28.5, 29.6, 31.8),
y1 = c(0.4, 0.3, 0.4, 0.35, 0.4, 0.8, 0.85, 0.9, 0.8, 0.75),
y2 =c(5, 6.6, 4, 5.2, 20, 3.4, 5.6, 4.5, 8, 10))

head(annotation)

topic_meta_meta(annotation)
@

\begin{figure}[htp]
\begin{center}
\includegraphics[width=6in,height=6in]{figure/topic_meta_meta.png}
\end{center}
\end{figure}


An example of plotting  a variable against two diversity measures as follows.

<<topic_meta_diversity, eval=TRUE, fig.height = 4, fig.height = 6>>=
annotation = data.frame(x_names = c(paste0("A",1:5), paste0("B",1:5)),
    x = c(0.5,2.0, 3.2, 4.6, 6.3,  23.5, 26.4, 28.5, 29.6, 31.8),
    y1 = c(0.4, 0.3, 0.4, 0.35, 0.4, 0.8, 0.85, 0.9, 0.8, 0.75),
    y2d =c(5, 6.6, 4, 5.2, 20, 3.4, 5.6, 4.5, 8, 10))

head(annotation)

topic_meta_diversity(annotation)

@

\begin{figure}[htp]
\begin{center}
\includegraphics[width=6in,height=6in]{figure/topic-meta-diversity.png}
\end{center}
\end{figure}



\end{document}
